version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.ID>> --recursive
            aws cloudformation delete-stack --stack-name "backend-<<parameters.ID>>"
            aws cloudformation delete-stack --stack-name "frontend-<<parameters.ID>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      ID:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_success
          command: |
            SUCCESS=$(curl -H "token: 68e4bc42-25a8-415a-b566-08c69a85f96a" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-v3

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v3]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-v3

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v3]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-v3

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v3]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-v3
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v3]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-v3

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v3]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-v3

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=BalakrishnaAvula \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: 68e4bc42-25a8-415a-b566-08c69a85f96a" --request PUT --data "$( aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --filters "Name=tag:Name,Values=BalakrishnaAvula" --output text)" https://api.memstash.io/values/backendURL
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=BalakrishnaAvula \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --filters "Name=tag:Name,Values=BalakrishnaAvula" --output text >>~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"   

  configure-infrastructure:
    docker:
      - image: cimg/python:3.9.5
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fe:ac:75:14:e3:81:6b:69:f9:2b:01:ba:5d:81:b4:b9"
            - "fb:d3:a8:e8:e0:8b:f6:e5:46:4c:d6:c4:ad:a2:e6:5b"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure=server.yml
      - destroy-environment 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            npm run migrations >/tmp/migration.log
      - run:
          name: Send migration results to memstash
          command: |
            grep -q "has been executed successfully" /tmp/migration.log && curl -H "Content-Type: text/plain" -H "token: 68e4bc42-25a8-415a-b566-08c69a85f96a" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - destroy-environment 
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install nodejs            
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 68e4bc42-25a8-415a-b566-08c69a85f96a" --request GET https://api.memstash.io/values/backendURL)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm run build && aws s3 cp ./dist s3://udapeople-kk1j287dhjppmz786/ --recursive
      - destroy-environment                  
  deploy-backend:
    docker:
      - image: cimg/python:3.9.5
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fe:ac:75:14:e3:81:6b:69:f9:2b:01:ba:5d:81:b4:b9"
            - "fb:d3:a8:e8:e0:8b:f6:e5:46:4c:d6:c4:ad:a2:e6:5b"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment  

  smoke-test:
    docker:
      - image: alpine:test 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 68e4bc42-25a8-415a-b566-08c69a85f96a" --request GET https://api.memstash.io/values/backendURL)
            BACKEND_URL=${BACKEND_IP}:3030/api/status
      - run:
          name: Backend smoke test.
          command: |
            curl -s ${BACKEND_URL}
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install what
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=BalakrishnaAvula \
              --stack-name "cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
      - destroy-environment  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend  -${OldWorkflowID}"
            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]